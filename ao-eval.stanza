defpackage ao-eval :
   import core
   import math
   import collections
   import reader
   import geom
   import eval
   import ao
   import glu
   import font

;;; TODO: TEMPORARY CHECKING UNTIL REPL MODE IMPLEMENTED IN COMPILER

defn geom-eval-top-env () :
  val geom-pkg = Package(`geom, [*packages*[`core]])
  val geom-env = frame(geom-pkg)
  add-binding(geom-env, `V2f, V2f)
  add-binding(geom-env, `V3f, V3f)
  add-binding(geom-env, `V4f, V4f)
  add-binding(geom-env, `V3i, V3i)
  add-binding(geom-env, `set-elt, set-elt)
  add-binding(geom-env, `V3f-unit, V3f-unit)
  add-binding(geom-env, `V3f-fill, V3f-fill)
  add-binding(geom-env, `max-idx, max-idx)
  add-binding(geom-env, `RED, RED)
  add-binding(geom-env, `BLUE, BLUE)
  add-binding(geom-env, `GREEN, GREEN)
  add-binding(geom-env, `x, x)
  add-binding(geom-env, `y, y)
  add-binding(geom-env, `z, z)
  add-binding(geom-env, `magnitude, magnitude)
  add-binding(geom-env, `distance, distance)
  add-binding(geom-env, `area, area)
  add-binding(geom-env, `volume, volume)
  add-binding(geom-env, `Box, Box)
  add-binding(geom-env, `lo, lo)
  add-binding(geom-env, `hi, hi)
  add-binding(geom-env, `center, center)
  add-binding(geom-env, `dims, dims)
  add-binding(geom-env, `empty?, empty?)
  add-binding(geom-env, `union, union)
  add-binding(geom-env, `intersection, intersection)
  add-binding(geom-env, `invert, invert)
  add-binding(geom-env, `PolyLine, PolyLine)
  add-binding(geom-env, `Polygon, Polygon)
  add-binding(geom-env, `contours, contours)
  add-binding(geom-env, `Contour, Contour)
  add-binding(geom-env, `Mesh, Mesh)
  add-binding(geom-env, `points, points)
  add-binding(geom-env, `segments, segments)
  add-binding(geom-env, `triangulate, triangulate)
  add-binding(geom-env, `circle-n, circle-n)
  add-binding(geom-env, `to-polygon, to-polygon)
  add-binding(geom-env, `*font*, *font*)
  add-binding(geom-env, `font-3x3, font-3x3)
  add-binding(geom-env, `get-glyph, get-glyph)
  add-binding(geom-env, `polyline, polyline)

geom-eval-top-env()

defn ao-eval-top-env () :
  val ao-pkg = Package(`ao, [*packages*[`geom]])
  val ao-env = frame(ao-pkg)
  val Vec3FieldT = Type(`Vec3Field, fn (x) : x is Vec3Field, fn (x): x as Vec3Field)
  add-binding(ao-env, `Vec3Field, Vec3FieldT)
  val FloFieldT = Type(`FloField, fn (x) : x is FloField, fn (x): x as FloField)
  add-binding(ao-env, `FloField, FloFieldT)
  val FloFieldThunkT = Type(`FloFieldThunk, fn (x) : x is (() -> FloField), fn (x): x as (() -> FloField))
  add-binding(ao-env, `FloFieldThunk, FloFieldThunkT)
  val ShapeT = Type(`Shape, fn (x) : x is Shape, fn (x): x as Shape)
  add-binding(ao-env, `Shape, ShapeT)
  val GlueT = Type(`Glue, fn (x) : x is Glue, fn (x): x as Glue)
  add-binding(ao-env, `Glue, GlueT)
  add-binding(ao-env, `pi, PI-F)
  add-binding(ao-env, `hpi, 0.5f * PI-F)
  add-binding(ao-env, `pi2, 2.0f * PI-F)
  add-binding(ao-env, `lit, lit)
  add-binding(ao-env, `fab-x, fab-x)
  add-binding(ao-env, `fab-y, fab-y)
  add-binding(ao-env, `fab-z, fab-z)
  add-binding(ao-env, `Vec3Field, Vec3Field)
  add-binding(ao-env, `Vec2Field, Vec2Field)
  add-binding(ao-env, `bounds, bounds)
  add-binding(ao-env, `points, points)
  add-binding(ao-env, `add-points, add-points)
  add-binding(ao-env, `add-min-x-point, add-min-x-point)
  add-binding(ao-env, `add-max-x-point, add-max-x-point)
  add-binding(ao-env, `add-min-y-point, add-min-y-point)
  add-binding(ao-env, `add-max-y-point, add-max-y-point)
  add-binding(ao-env, `add-min-z-point, add-min-z-point)
  add-binding(ao-env, `add-max-z-point, add-max-z-point)
  add-binding(ao-env, `rem, rem)
  add-binding(ao-env, `bit-and, bit-and)
  add-binding(ao-env, `bit-or, bit-or)
  add-binding(ao-env, `plus, plus)
  add-binding(ao-env, `minus, minus)
  add-binding(ao-env, `times, times)
  add-binding(ao-env, `divide, divide)
  add-binding(ao-env, `negate, negate)
  add-binding(ao-env, `sin, sin)
  add-binding(ao-env, `cos, cos)
  add-binding(ao-env, `tan, tan)
  add-binding(ao-env, `asin, asin)
  add-binding(ao-env, `acos, acos)
  add-binding(ao-env, `atan, atan)
  add-binding(ao-env, `atan2, atan2)
  add-binding(ao-env, `pow, pow)
  add-binding(ao-env, `exp, exp)
  add-binding(ao-env, `sqr, sqr)
  add-binding(ao-env, `edge, edge)
  add-binding(ao-env, `Glue, Glue)
  add-binding(ao-env, `tri, triangle)
  add-binding(ao-env, `rect, rect)
  add-binding(ao-env, `square, square)
  add-binding(ao-env, `circle, circle)
  ;; add-binding(ao-env, `to-field, to-field)
  add-binding(ao-env, `to-field2, to-field2)
  add-binding(ao-env, `convex, convex)
  add-binding(ao-env, `cube, cube)
  add-binding(ao-env, `box, box)
  add-binding(ao-env, `round-box, round-box)
  add-binding(ao-env, `sphere, sphere)
  add-binding(ao-env, `mov, mov)
  add-binding(ao-env, `mov-x, mov-x)
  add-binding(ao-env, `mov-y, mov-y)
  add-binding(ao-env, `mov-z, mov-z)
  add-binding(ao-env, `mag, mag)
  add-binding(ao-env, `mag1, mag1)
  add-binding(ao-env, `mag-x, mag-x)
  add-binding(ao-env, `mag-y, mag-y)
  add-binding(ao-env, `mag-z, mag-z)
  ;; add-binding(ao-env, `rot, rot)
  add-binding(ao-env, `rot-x, rot-x)
  add-binding(ao-env, `rot-y, rot-y)
  add-binding(ao-env, `rot-z, rot-z)
  add-binding(ao-env, `revolve-y, revolve-y)
  add-binding(ao-env, `revolve-x, revolve-x)
  add-binding(ao-env, `reflect-x, reflect-x)
  add-binding(ao-env, `reflect-y, reflect-y)
  add-binding(ao-env, `reflect-z, reflect-z)
  add-binding(ao-env, `reflect-xy, reflect-xy)
  add-binding(ao-env, `reflect-xz, reflect-xz)
  add-binding(ao-env, `reflect-yz, reflect-yz)
  add-binding(ao-env, `shear, shear-x-y)
  add-binding(ao-env, `taper, taper-xy-z)
  add-binding(ao-env, `offset, offset)
  add-binding(ao-env, `clearance, clearance)
  add-binding(ao-env, `shell, shell)
  add-binding(ao-env, `blend, blend)
  add-binding(ao-env, `morph, morph)
  add-binding(ao-env, `extrude, extrude)
  add-binding(ao-env, `cyl, cylinder)
  add-binding(ao-env, `capsule, capsule)
  add-binding(ao-env, `capsule2, capsule2)
  add-binding(ao-env, `thicken, thicken)
  add-binding(ao-env, `cone, cone)
  add-binding(ao-env, `pyr, pyramid)
  add-binding(ao-env, `torus, torus)
  add-binding(ao-env, `space, space)
  add-binding(ao-env, `space-x, space-x)
  add-binding(ao-env, `space-y, space-y)
  add-binding(ao-env, `space-z, space-z)
  add-binding(ao-env, `spacer, spacer)
  add-binding(ao-env, `spacer-x, spacer-x)
  add-binding(ao-env, `spacer-y, spacer-y)
  add-binding(ao-env, `spacer-z, spacer-z)
  add-binding(ao-env, `stack-idx, stack-idx)
  add-binding(ao-env, `stack-x, stack-x)
  add-binding(ao-env, `stack-y, stack-y)
  add-binding(ao-env, `stack-z, stack-z)
  add-binding(ao-env, `stack-idx, stack-idx)
  add-binding(ao-env, `glue, glue)
  add-binding(ao-env, `glue-of, glue-of)
  add-binding(ao-env, `glue-even, glue-even)
  add-binding(ao-env, `glue-odd, glue-odd)
  add-binding(ao-env, `assign-glue-idx, assign-glue-idx)
  add-binding(ao-env, `align-min-x, align-min-x)
  add-binding(ao-env, `align-max-x, align-max-x)
  add-binding(ao-env, `align-min-y, align-min-y)
  add-binding(ao-env, `align-max-y, align-max-y)
  add-binding(ao-env, `align-min-z, align-min-z)
  add-binding(ao-env, `align-max-z, align-max-z)
  add-binding(ao-env, `empty, empty)
  add-binding(ao-env, `triangle, triangle)
  add-binding(ao-env, `slice, slice)
  add-binding(ao-env, `save, save)
  add-binding(ao-env, `xy, xy)
  add-binding(ao-env, `Layer, Layer)
  add-binding(ao-env, `Block, Block)
  add-binding(ao-env, `Layout, Layout)
  add-binding(ao-env, `attach, attach)
  add-binding(ao-env, `join-pieces, join-pieces)
  add-binding(ao-env, `smash, smash)
  add-binding(ao-env, `nest, nest)
  add-binding(ao-env, `all-forms, all-forms)

ao-eval-top-env()

public defn eval-ao (s:String, ao-env:Frame) -> Geom :
  val forms = read-all(s)
  ;; println-all(["FORMS: " forms])
  val es = unwrap-all(parse(forms))
  ;; println-all(["EXP: "   es])
  val e  = eval-begin(List(ao-env), es)
  ;; println-all(["G: " e])
  match(e) :
    (g:Geom) : jit(g)
    (o) :      Msg(to-string(o))

