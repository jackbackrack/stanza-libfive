defpackage libfive/shape :
  import core
  import math
  import collections
  import utils/basic
  import geom/angle
  import geom/vec
  import geom/mat
  import geom/box
  import geom/mesh
  import geom/pixels
  import geom/line-segment
  import geom/polyline
  import geom/polygon
  import geom/shape
  import geom/bounded
  import geom/poseable
  import geom/assembly
  import geom/space
  import geom/geom
  import libfive/core
  import libfive/field

public defmulti mesh (s:Shape) -> False|Mesh
public defmulti set-mesh (s:Shape, m:Mesh) -> False
public defmulti mat (s:Shape) -> Mat44f
public defmulti cache (s:Shape) -> HashTable<Vec3Field,FloField>
public defmulti fabber (s:Shape) -> ((Vec3Field) -> FloField)

public defn Shape (fabber:(Vec3Field) -> FloField, mat:Mat44f, bounds:Box3f, state:AnyShapeState) :
  val cache = HashTable<Vec3Field,FloField>()
  var mesh:False|Mesh = false
  new Shape :
    defmethod bounds (this) : bounds
    defmethod state (this) : state
    defmethod fabber (this) : fabber
    defmethod mat (this) : mat
    defmethod cache (this) : cache
    defmethod mesh (this) : mesh
    defmethod set-mesh (this, m:Mesh) : mesh = m

public defn smash (s:Shape) -> Shape :
  xyz(inverse(mat(s)), s)

public defn Shape (fabber:(Vec3Field) -> FloField, mat:Mat44f, bounds:Box3f, name:False|Symbol, color:V4f, tags:Tuple<Symbol>, poses:Tuple<KeyValue<Symbol,Mat44f>>) :
  Shape(fabber, mat, bounds, AnyShapeState(name, color, tags, poses))

public defn Shape (fabber:(Vec3Field) -> FloField, bounds:Box3f) :
  Shape(fabber, id-mat44f(), bounds, false, WHITE, [], [])

public defn map (f:Shape -> Shape, m:Mat44f, p:Poseable) -> Poseable :
  match(p) :
    (a:Assembly) : Assembly(id-mat44f(), name(a), color(a), seq(map{f, mat(a) * m, _}, children(a)))
    (s:Shape) : f(xyz(m, s))

public defn map (f:Shape -> Shape, p:Poseable) -> Poseable :
  map(f, id-mat44f(), p)

defmethod clone (shape:Shape, state:AnyShapeState) -> Shape :
  Shape(fabber(shape), mat(shape), bounds(shape), state)

public defn Shape (s:Shape, mat:Mat44f, bounds:Box3f, name:False|Symbol, color:V4f, tags:Tuple<Symbol>, poses:Tuple<KeyValue<Symbol,Mat44f>>) :
  Shape(fabber(s), mat, bounds, name, color, tags, poses)

public defn Shape (s:Shape, bounds:Box3f) :
  Shape(s, mat(s), bounds, name(s), WHITE, tags(s), poses(s))

defn fab (s:Shape, p:Vec3Field) -> FloField :
  fabber(s)(p)
  ;; if key?(cache(s), p) :
  ;;   cache(s)[p]
  ;; else :
  ;;   val f = fabber(s)(p)
  ;;   cache(s)[p] = f
  ;;   ;; if length(cache(s)) > 1 :
  ;;   ;;   println-all(["MISS " to-tuple $ keys(cache(s))])
  ;;   f

defmethod print (s:OutputStream, o:Shape) :
  print-all(s, ["Shape(" bounds(o) ")"])

public defn to-mesh (s:Shape) -> Mesh :
  if mesh(s) is False :
    to-mesh(jit(s) as BoundedTree)
  else :
    mesh(s) as Mesh

public defn empty? (s:Shape) -> True|False :
  empty?(bounds(s)) or empty?(vertices(to-mesh(s)))

public defn computed-bounds (s:Shape) -> Box3f :
  bounds(to-mesh(s))

public defn empty2? (s:Shape) -> True|False :
  empty?(xy(bounds(s))) or perimeter(slice(0.0f, s)) == 0.0f

public defn intersects? (a:Shape, b:Shape) -> True|False :
  false when empty?(bounds(a) & bounds(b)) else not empty?(a & b)

public defn intersects2? (a:Shape, b:Shape) -> True|False :
  false when empty?(xy(bounds(a)) & xy(bounds(b))) else not empty2?(a & b)

public deftype Glue <: ShapeGlue&Shape

public defn Glue (amount:Float) :
  new Glue :
    defmethod fabber (this): fn (p:Vec3Field) : lit(pos-inf-f)
    defmethod bounds (this): Box3f(V3f(0.0f, 0.0f, 0.0f), V3f(0.0f, 0.0f, 0.0f))
    defmethod amount (this): amount

defmethod glue-of (s:Shape, a:Float) -> Shape : Glue(a)
defmethod glue-of (s:Assembly, a:Float) -> Assembly : AssemblyGlue(Glue(a))

public defn empty () : Shape(lit{pos-inf-f}, neg-inf-box3f())
public defn full () : Shape(lit{neg-inf-f}, pos-inf-box3f())

defmethod spacer (g:Shape, gdims:V3f) : Shape(lit{pos-inf-f}, Box3f(dim-min(gdims), dim-max(gdims)))
defmethod spacer (g:Assembly, dims:V3f) : rgb(BLACK, Assembly([ spacer(empty(), dims) ]))

public defn spacer-x (gdim:Float) : spacer-x(gdim, empty())
public defn spacer-y (gdim:Float) : spacer-y(gdim, empty())
public defn spacer-z (gdim:Float) : spacer-z(gdim, empty())


public var *render-offset* = 16.0f

public defn slice (z:Float, s:Shape) -> Polygon :
  val bt = jit(s) as BoundedTree
  val eps = *render-offset* ;; *resolution*
  val bds = Box3f(xyz(xy(lo(bounds(s)))) + V3f((- eps), (- eps), z), xyz(xy(hi(bounds(s)))) + V3f(eps, eps, z))
  val start = current-time-ms()
  val poly = rgb(color(s), tree-render-slice(tree(bt), bds & max-bounds(), *resolution*))
  ;; println-all(["RENDER-SLICE = " to-float(current-time-ms() - start) * 0.001f])
  poly

public defn pixels (z:Float, s:Shape) -> Pixels :
  ;; println-all(["RENDER-PIXELS-START " bounds(s)])
  val bt = jit(s) as BoundedTree
  ;; val eps = *render-offset* ;; *resolution*
  val eps = 1.0f / *resolution*
  val bds = Box3f(xyz(xy(lo(bounds(s)))) + V3f((- eps), (- eps), z), xyz(xy(hi(bounds(s)))) + V3f(eps, eps, z))
  val start = current-time-ms()
  val pixels = tree-render-pixels(tree(bt), bds & max-bounds(), *resolution*)
  ;; println-all(["RENDER-PIXELS = " to-float(current-time-ms() - start) * 0.001f])
  pixels

public defn rem (a:Shape, args:Seqable<Shape>) -> Shape :
  rem(a, union(args))

public defn rem (shapes:Seqable<Shape>) -> Shape :
  val s = to-seq(shapes)
  rem(next(s), s)

public defn thicken (g:PolyLine2f|Contour|Polygon, f:(V2f, V2f, Float) -> Shape, d:Float) -> Shape :
  thicken(segments(g), f, d)

public defn thicken (g:PolyLine3f, f:(V3f, V3f, Float) -> Shape, d:Float) -> Shape :
  thicken(segments(g), f, d)

public defn thicken (segments:Seqable<LineSegment3f>, f:(V3f, V3f, Float) -> Shape, d:Float) -> Shape :
  val caps = for seg in segments seq : f(start(seg), end(seg), d)
  reduce(fn (a:Shape, b:Shape): a | b, caps)

public defn thicken (segments:Seqable<LineSegment2f>, f:(V2f, V2f, Float) -> Shape, d:Float) -> Shape :
  val caps = for seg in segments seq : f(start(seg), end(seg), d)
  reduce(fn (a:Shape, b:Shape): a | b, empty(), caps)

public defn extrude (zmin:Float, zmax:Float, shape:Shape) -> Shape :
  val b = bounds(shape)
  Shape(fn (p): max(fab(shape, p), max(lit(zmin) - z(p), z(p) - lit(zmax))),
        Box3f(V3f(x(lo(b)), y(lo(b)), zmin), V3f(x(hi(b)), y(hi(b)), zmax)))

public defn extrude (h:Float, shape:Shape) -> Shape :
  extrude(dim-min(h), dim-max(h), shape)

public defn extrude (h:Float) : extrude{h, _}

public defmethod bit-or (a:Shape, b:Shape) -> Shape :
  val new-bounds = bounds(a) | bounds(b)
  val delta = center(new-bounds) - center(bounds(a))
  Shape(fn (p): min(fab(a, p), fab(b, p)),
        mat(a) * mov-mat44f(delta), bounds(a) | bounds(b), name(a, b), color(a, b), tags(a, b), poses(a, b))

public defn intersection (args:Seqable<Shape>) -> Shape :
  reduce(bit-and, args)

public defn bit-and (a:Shape, b:Shape) -> Shape :
  val new-bounds = bounds(a) & bounds(b)
  val delta = center(new-bounds) - center(bounds(a))
  Shape(fn (p): max(fab(a, p), fab(b, p)),
        mat(a) * mov-mat44f(delta), new-bounds, name(a, b), color(a, b), tags(a, b), poses(a, b))

public defn intersect-using-mat-a (a:Shape, b:Shape) -> Shape :
  val new-bounds = bounds(a)
  Shape(fn (p): max(fab(a, p), fab(b, p)),
        mat(a), new-bounds, name(a), color(a), tags(a), poses(a))

public defn union-using-mat-a (a:Shape, b:Shape) -> Shape :
  val new-bounds = bounds(a)
  Shape(fn (p): min(fab(a, p), fab(b, p)),
        mat(a), new-bounds, name(a), color(a), tags(a), poses(a))

public defn invert (s:Shape) -> Shape :
  Shape(fn (p): (- fab(s, p)), pos-inf-box3f())

public defn rem (a:Shape, b:Shape) -> Shape :
  Shape(a & invert(b), mat(a), bounds(a), name(a, b), color(a, b), tags(a, b), poses(a, b))

public defn offset (s:Shape, o:Float) -> Shape :
  Shape(fn (p): fab(s, p) - lit(o), mat(s), fatten(bounds(s), xyz(o)), name(s), color(s), tags(s), poses(s))
  
public defn clearance (a:Shape, b:Shape, o:Float) -> Shape :
  Shape(a & invert(offset(b, o)), mat(a), bounds(a), name(a, b), color(a, b), tags(a, b), poses(a))
  
public defn shell (s:Shape, o:Float) -> Shape :
  clearance(s, s, (- o))
  
public defn blend (a:Shape, b:Shape, m:Float) -> Shape :
  val joint = a | b
  val fillet = Shape(fn (p): sqrt(abs(fab(a, p))) + sqrt(abs(fab(b, p))) - lit(m), bounds(a) | bounds(b))
  joint | fillet
  
public defn morph (a:Shape, b:Shape, m:Float) -> Shape :
  Shape(fn (p): fab(a, p) * (lit(1.0) - lit(m)) + fab(b, p) * lit(m), bounds(a) | bounds(b))

public defn with-xyz (m:Mat44f, f:(Vec3Field) -> Vec3Field, s:Shape) -> Shape :
  val new-poses = to-tuple $ seq(fn (p) : key(p) => value(p) * m, poses(s))
  Shape(fn (p): fab(s, f(p)), mat(s) * m, m * bounds(s),
        name(s), color(s), tags(s), new-poses)

public defmethod xyz (mat:Mat44f, s:Shape) -> Shape :
  with-xyz(mat, fn (p) : inverse(mat) * p, s)

public defn xy (s:Shape) -> Shape : xy(0.0f, s)

;; TODO : UPDATE BOUNDS
public defn xy (z:Float, s:Shape) -> Shape :
  with-xyz(id-mat44f(), fn (p): Vec3Field(x(p), y(p), lit(z)), s)

public defn edge (v0:V3f, v1:V3f) -> Shape :
  Shape(fn (p): lit(y(v1) - y(v0)) * (x(p) - lit(x(v0))) - lit(x(v1) - x(v0)) * (y(p) - lit(y(v0))),
        Box3f(v0) | Box3f(v1))

public defn area (pts:Tuple<V3f>) -> Float :
  var tot:Float = 0.0f
  for i in 0 to length(pts) do :
    val p1 = pts[i]
    val p2 = pts[(i + 1) % length(pts)]
    tot = tot + (x(p2) - x(p1)) * (y(p2) + y(p1))
  tot

public defn convex (ipts:Tuple<V3f>) -> Shape :
  val pts   = ipts when area(ipts) < 0.0f else (to-tuple $ reverse(to-list $ ipts))
  val edges = for i in 0 to length(pts) seq :
                edge(pts[i], pts[(i + 1) % length(pts)])
  val shape = reduce(fn (a:Shape, b:Shape): a & b, edges)
  Shape(fabber(shape), reduce(bit-or, seq(Box3f, ipts)))

public defn trim (v0:V3f, v1:V3f, s:Shape) -> Shape :
  val res = s & edge(v0, v1)
  Shape(fabber(res), bounds(s))

public defn abs-x (s:Shape) -> Shape :
  val res = s & edge(V3f(0.0f, neg-inf-f), V3f(0.0f, pos-inf-f))
  val new-bounds = Box3f(set-elt(lo(bounds(s)), 0, max(lo(bounds(s))[0], 0.0f)),
                         set-elt(hi(bounds(s)), 0, max(hi(bounds(s))[0], 0.0f)))
  Shape(fabber(res), new-bounds)

public defn abs-y (s:Shape) -> Shape :
  val res = s & edge(V3f(neg-inf-f, 0.0f), V3f(pos-inf-f, 0.0f))
  val new-bounds = Box3f(set-elt(lo(bounds(s)), 1, max(lo(bounds(s))[1], 0.0f)),
                         set-elt(hi(bounds(s)), 1, max(hi(bounds(s))[1], 0.0f)))
  Shape(fabber(res), new-bounds)

defn shear-x-y (ymin:Float, ymax:Float, dx0:Float, dx1:Float, s:Shape) -> Shape :
  defn xf (p) :
    val f = (y(p) - lit(ymin)) / (lit(ymax) - y(p))
    Vec3Field(x(p) - lit(dx0) * (lit(1.0) - f) - lit(dx1) * f, y(p), z(p))  
  with-xyz(shear-x-y-mat44f(ymin, ymax, dx0, dx1), xf, s)

public defn shear-x-y (h:Float, dx0:Float, dx1:Float, s:Shape) -> Shape :
  shear-x-y(dim-min(h), dim-max(h), dx0, dx1, s)

public defn twist-z (h:Float, a:Float, shape:Shape) -> Shape :
  defn xf (p) :
    val f = degrees-to-radians(a) / h
    val b = lit(f) * z(p)
    val c = cos(b)
    val s = sin(b)
    val m = Mat22Field(c, (- s), s, c)
    val v = m * xy(p)
    fab(shape, Vec3Field(x(v), y(v), z(p)))
  Shape(xf, bounds(shape))

public defn bend-z (h:Float, a:Float, shape:Shape) -> Shape :
  defn xf (p) :
    val f = degrees-to-radians(a) / h
    val b = lit(f) * y(p)
    val c = cos(b)
    val s = sin(b)
    val m = Mat22Field(c, (- s), s, c)
    val v = m * xy(p)
    fab(shape, Vec3Field(x(v), y(v), z(p)))
  Shape(xf, bounds(shape))

;; TODO: CAN'T GET THIS TO WORK WELL
public defn bumps (period:Float, shape:Shape) -> Shape :
  Shape(fn (p):
          val fac = lit(PI-F / period)
          val b = sin(fac * x(p)) + sin(fac * y(p)) + sin(fac * z(p))
          fab(shape, p) + b,
        bounds(shape))

;; TODO: CAN'T GET THIS TO WORK WELL
public defn smooth-union (k:Float, a:Shape, b:Shape) -> Shape :
  Shape(fn (p):
          val [ar, br] = [fab(a, p), fab(b, p)]
          val h = clamp(lit(0.5) + lit(0.5) * (br - ar) / lit(k), lit(0.0), lit(1.0))
          mix(ar, br, h) - lit(k) * h * (lit(1.0) - h)
        id-mat44f(), bounds(a) | bounds(b), name(a, b), color(a, b), tags(a, b), poses(a, b))

;; TODO : UPDATE BOUNDS
defn taper-x-y (ymin:Float, ymax:Float, s0:Float, s1:Float, s:Shape) -> Shape :
  defn xf (p) :
    val sc = lit(ymax - ymin) / ((lit(s1) * (y(p) - lit(ymin))) + (lit(s0) * (lit(ymax) - y(p))))
    Vec3Field(x(p) * sc, y(p), z(p))
  with-xyz(id-mat44f(), xf, s)

;; TODO : UPDATE BOUNDS
defn taper-xy-z (zmin:Float, zmax:Float, s0:Float, s1:Float, s:Shape) -> Shape :
  defn xf (p) :
    val sc = lit(zmax - zmin) / ((lit(s1) * (z(p) - lit(zmin))) + (lit(s0) * (lit(zmax) - z(p))))
    Vec3Field(x(p) * sc, y(p) * sc, z(p))
  with-xyz(id-mat44f(), xf, s)

defn taper-y-z (zmin:Float, zmax:Float, s0:Float, s1:Float, s:Shape) -> Shape :
  defn xf (p) :
    val sc = lit(zmax - zmin) / ((lit(s1) * (z(p) - lit(zmin))) + (lit(s0) * (lit(zmax) - z(p))))
    Vec3Field(x(p), y(p) * sc, z(p))
  with-xyz(id-mat44f(), xf, s)

public defn loft (zmin:Float, zmax:Float, a:Shape, b:Shape) -> Shape :
  val xy-bounds = bounds(a) | bounds(b)
  Shape(fn (p): max(max(z(p) - lit(zmax), lit(zmin) - z(p)),
                   (((z(p) - lit(zmin)) * fab(b, p)) + ((lit(zmax) - z(p)) * fab(a, p))) / (lit(zmax) - lit(zmin)))
        Box3f(set-elt(lo(xy-bounds), 2, zmin), set-elt(hi(xy-bounds), 2, zmax)))

public defn loft (h:Float, a:Shape, b:Shape) : loft(dim-min(h), dim-max(h), a, b)

public defn taper-xy-z (h:Float, s0:Float, s1:Float, s:Shape) -> Shape :
  taper-xy-z(dim-min(h), dim-max(h), s0, s1, s)

public defn taper-y-z (h:Float, s0:Float, s1:Float, s:Shape) -> Shape :
  taper-y-z(dim-min(h), dim-max(h), s0, s1, s)

public defn revolve-y (s:Shape) -> Shape :
  val b = bounds(s)
  val xmx = max(abs(x(lo(b))), abs(x(hi(b))))
  Shape(with-xyz(id-mat44f(), fn (p): Vec3Field(sqrt(sqr(x(p)) + sqr(z(p))), y(p), z(p)), s),
        Box3f(V3f((- xmx), y(lo(b)), (- xmx)), V3f(xmx, y(hi(b)), xmx)))

public defn unrevolve-y (s:Shape) -> Shape :
  with-xyz(mag-mat44f(V3f(PI-F, 1.0f, 1.0f)), fn (p): Vec3Field(z(p) * cos(x(p)), y(p), z(p) * sin(x(p))), s)
  ;; with-xyz(mag-mat44f(V3f(2.0f * PI-F, 1.0f, 1.0f)), fn (p): Vec3Field(atan2(x(p), z(p)), y(p), sqrt(sqr(x(p)) + sqr(z(p)))), s)

public defn revolve-x (s:Shape) -> Shape :
  val b = bounds(s)
  val ymx = max(abs(y(lo(b))), abs(y(hi(b))))
  Shape(with-xyz(id-mat44f(), fn (p): Vec3Field(x(p), sqrt(sqr(y(p)) + sqr(z(p))), z(p)), s),
        Box3f(V3f(x(lo(b)), (- ymx), (- ymx)), V3f(x(hi(b)), ymx, ymx)))

public defn unrevolve-x (s:Shape) -> Shape :
  with-xyz(mag-mat44f(V3f(1.0f, 1.0f, 1.0f)), fn (p): Vec3Field(x(p), z(p) * cos(y(p)), z(p) * sin(y(p))), s)
  ;; mag-y(PI-F, with-xyz(id-mat44f(), fn (p): Vec3Field(x(p), z(p) * cos(y(p)), z(p) * sin(y(p))), s))
  ;; with-xyz(mag-mat44f(V3f(2.0f * PI-F, 1.0f, 1.0f)), fn (p): Vec3Field(x(p), atan2(y(p), z(p)), sqrt(sqr(y(p)) + sqr(z(p)))), s)

;; public defn pixels (z:Float, s:Shape) -> Pixels :
;;   val poly = slice(z, s)
;;   val dim = *resolution*
;;   val gdims = xyz(xy(to-v3i(round(dims(bounds(s)) / dim)))) + V3i(0, 0, 1)
;;   println("GRID DIM %_ BOUNDS %_ DIMS %_ GDIMS %_" % [dim bounds(s) dims(bounds(s)) gdims])
;;   val grid = Grid(gdims, dim)
;;   scan(grid, poly)
;;   to-pixels(grid)

public defn dump (filename:String, s:Shape) -> False :
  val bt = jit(s) as BoundedTree
  tree-save(tree(bt), filename)

public defn eval-f (p:V3f, s:Shape) -> Float :
  val bt = jit(s) as BoundedTree
  tree-eval-f(tree(bt), p)

public defn math-string (s:Shape) -> String :
  val bt = jit(s) as BoundedTree
  tree-print(tree(bt))

public defn save (z:Float, filename:String, s:Shape) -> False :
  val bt = jit(s) as BoundedTree
  val eps = *resolution*
  tree-save-slice(tree(bt), filename, fatten(bounds(s), xyz(eps)) & max-bounds(), *resolution*)

public defn save (filename:String, s:Shape) -> False :
  val bt = jit(s) as BoundedTree
  val eps = *resolution*
  tree-save-mesh(tree(bt), filename, fatten(bounds(s), xyz(eps)) & max-bounds(), *resolution*)

public defmulti jit-poseable (p:Poseable) -> AnyTree

public deftype AnyTree <: Geom

public defstruct BoundedTree <: AnyTree :
  shape: Shape
  field: FloField

public defn bounds (t:BoundedTree) : bounds(shape(t))
public defn name (t:BoundedTree) : name(shape(t))
public defn tree (t:BoundedTree) : tree(field(t))
public defn mesh (t:BoundedTree) : mesh(shape(t))
public defn set-mesh (t:BoundedTree, m:Mesh) : set-mesh(shape(t), m)

public defstruct TreeAssembly <: AnyTree :
  name  : False|Symbol
  mat   : Mat44f
  color : V4f
  trees : Tuple<AnyTree>

;; public defn union (args:Seqable<Shape>) -> Shape :
;;   ;; reduce(bit-or, empty(), cat-all(seq(shapes, args)))
;;   reduce(bit-or, empty(), args)

;; var mcount = to-seq(0 to false)

;;  val res = rgb(color(s), tree-render-mesh(tree(bt), fatten(bounds(s), xyz(eps)) & max-bounds(), *resolution*))

public defn to-mesh (bt:BoundedTree) -> Mesh :
  if mesh(bt) is False :
    ;; val num = next(mcount)
    ;; val filename = string-join(["part-" num ".tree"])
    ;; tree-save(tree(bt), filename)
    ;; val start-time = current-time-ms()
    val eps = *resolution*
    val s   = shape(bt)
    val bds = fatten(bounds(s), xyz(eps)) & max-bounds()
    val res = rgb(color(s), tree-render-mesh(tree(bt), bds, *resolution*))
    ;; val bds = fatten(bounds(bt), xyz(*render-offset*))
    ;; val res = tree-render-mesh(tree(bt), bds, *resolution*)
    ;; val mesh-time = current-time-ms()
    ;; println-all(["MESH-" num " " dims(bds) " RENDER " to-float(mesh-time - start-time) * 0.001f " SECS"])
    ;; rgb(color(shape(bt)), res)
    set-mesh(bt, res)
    res
  else :
    mesh(bt) as Mesh

public var *max-bounds*:False|Box3f = false
public defn max-bounds () :
  default<Box3f>(*max-bounds*, dims-to-box $ xyz(*resolution* * 1000.0f))
public defn set-max-bounds (b:Box3f) : *max-bounds* = b

defmethod jit-poseable (s:Shape) -> BoundedTree :
  val e = fab(s, Vec3Field(fab-x(), fab-y(), fab-z()))
  ;; println-all(["E = " count(e)])
  BoundedTree(s, e)

defmethod jit-poseable (a:Assembly) -> TreeAssembly :
  TreeAssembly(name(a), mat(a), color(a), to-tuple $ seq(jit-poseable, children(a)))

public defn jit (g:Geom) -> Geom :
  match(g) :
    (p:Shape) :    jit-poseable(p)
    (a:Assembly) :
      val shapes = to-tuple $ any-shapes $ a
      ;; println("JIT %_" % [shapes])
      if all?({ _ is Shape }, shapes) :
        ;; println("JIT!")
        jit-poseable(a)
      else :
        a
    (geom) :       geom

