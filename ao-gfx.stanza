defpackage ao-gfx :
  import core
  import math
  import collections
  import ao
  import gl
  import geom
  import geom-gfx

var gcount = to-seq(0 to false)

defmethod render (bt:BoundedTree) -> False :
  ;; TODO MAKE PARAMETERIZABLE
  ;; println-all(["RENDERING BT"])
  val mesh = if mesh(bt) is False :
    val num = next(gcount)
    ;; val filename = string-join(["part-" num ".tree"])
    ;; tree-save(tree(bt), filename)
    val start-time = current-time-ms()
    val bds = fatten(bounds(bt), V3f-fill(*render-offset*))
    println("C")
    val res = tree-render-mesh(tree(bt), bds, *resolution*)
    val mesh-time = current-time-ms()
    println-all(["MESH-" num " " dims(bds) " RENDER " to-float(mesh-time - start-time) * 0.001f " SECS"])
    res
  else :
    mesh(bt) as Mesh
  set-mesh(bt, mesh)
  ;; println-all(["MESH: V = " length(vertices(mesh)) " F = " length(faces(mesh))])
  render(mesh)
  tree-delete(tree(bt))
  ;; gl-push-attrib(GL-CURRENT-BIT)
  ;; gl-color3f(1.0f, 0.5f, 0.5f)
  ;; gl-point-size(10.0f)
  ;; for point in points(tree) do :
  ;;   render(point)
  ;; gl-pop-attrib()

defmethod render (lay:TreeAssembly) -> False :
  gl-push-matrix()
  gl-mult-matrix(mat(lay))
  gl-push-attrib(GL-CURRENT-BIT)
  gl-color4(color(lay))
  for child in trees(lay) do :
    render(child)
  gl-pop-attrib()
  gl-pop-matrix()

